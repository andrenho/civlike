module;

#include <functional>
#include <optional>
#include <stdexcept>

export module civlike:fnval;

export struct Ruleset;
export struct GameParameters;

// TODO - create several variations accepting different parameters

export template <typename T>
struct GFnValue {
    using Function = std::function<T(Ruleset const&, GameParameters const&)>;

    GFnValue() = default;
    GFnValue(T t) : value_(t) {}              // NOLINT(*-explicit-constructor)
    GFnValue(Function f) : function_(f) {}    // NOLINT(*-explicit-constructor)

    T operator()(Ruleset const& ruleset, GameParameters const& game_par) const {
        auto o_value = optional(ruleset, game_par);
        if (!o_value.has_value())
            throw std::runtime_error("Field is mandatory");
        return *o_value;
    }

    std::optional<T> optional(Ruleset const& ruleset, GameParameters const& game_par) const {
        if (value_.has_value())
            return value_;
        if (function_.has_value())
            return (*function_)(ruleset, game_par);
        return {};
    }

private:
    std::optional<T> value_;
    std::optional<Function> function_;
};

